-- üöÄ Simple Auto Hop (Paginated + Retry + Debounce)
-- ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô >= TARGET_FULL ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á WAIT_BEFORE_HOP ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß Hop
-- ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏´‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á MIN_PLAYERS..MAX_PLAYERS (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏î‡∏¥‡∏°)

local Players          = game:GetService("Players")
local HttpService      = game:GetService("HttpService")
local TeleportService  = game:GetService("TeleportService")
local StarterGui       = game:GetService("StarterGui")

local player      = Players.LocalPlayer
local placeId     = game.PlaceId
local currentJob  = game.JobId

-- ===== ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ =====
local AUTO_HOP          = true
local TARGET_FULL       = 5            -- ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
local WAIT_BEFORE_HOP   = 20           -- ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô hop (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
local MIN_PLAYERS       = 1            -- ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
local MAX_PLAYERS       = 3            -- ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
local PAGE_LIMIT        = 15           -- ‡πÑ‡∏•‡πà‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Å‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ (‡∏Å‡∏±‡∏ô‡∏•‡∏π‡∏õ‡∏¢‡∏≤‡∏ß)
local RETRY_PER_PAGE    = 3            -- ‡∏£‡∏µ‡∏ó‡∏£‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
local RETRY_DELAY       = 1.5          -- ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏µ‡∏ó‡∏£‡∏≤‡∏¢
local SCAN_INTERVAL     = 5            -- ‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
-- ============================

local isHopping     = false
local timeWhenFull  = nil
local visited       = {}               -- ‡∏à‡∏≥ jobId ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤/‡πÄ‡∏à‡∏≠

-- helper: system message
local function sysmsg(txt, rgb)
    pcall(function()
        StarterGui:SetCore("ChatMakeSystemMessage", {
            Text = txt;
            Color = rgb or Color3.fromRGB(200, 200, 255);
        })
    end)
end

print("üöÄ Simple Auto Hop | >= "..TARGET_FULL.." ‡∏Ñ‡∏ô -> ‡∏£‡∏≠ "..WAIT_BEFORE_HOP.." ‡∏ß‡∏¥ -> Hop")
sysmsg("üöÄ Simple Auto Hop ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", Color3.fromRGB(120,255,120))

-- ========== ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü (‡∏°‡∏µ pagination) ==========
local function fetchServers(cursor)
    local base = "https://games.roblox.com/v1/games/"..placeId.."/servers/Public?sortOrder=Asc&limit=100"
    local url = cursor and (base.."&cursor="..HttpService:UrlEncode(cursor)) or base

    -- ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
    for attempt = 1, RETRY_PER_PAGE do
        local ok, resp = pcall(function()
            return game:HttpGet(url, true)
        end)
        if ok and resp then
            local ok2, data = pcall(function()
                return HttpService:JSONDecode(resp)
            end)
            if ok2 and data and data.data then
                return data
            end
        end
        task.wait(RETRY_DELAY)
    end
    return nil
end

-- ========== ‡∏Ñ‡∏±‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏Ñ‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ ==========
local function findLowPlayerServer()
    print("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏Ñ‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ (", MIN_PLAYERS, "-", MAX_PLAYERS, "‡∏Ñ‡∏ô )")
    local cursor, pages = nil, 0
    local best = nil

    while pages < PAGE_LIMIT do
        pages += 1
        local data = fetchServers(cursor)
        if not data then
            print(("‚ùå ‡∏´‡∏ô‡πâ‡∏≤ %d ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"):format(pages))
            if pages >= PAGE_LIMIT then break end
            cursor = data and data.nextPageCursor or cursor
            continue
        end

        -- ‡πÑ‡∏•‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
        for _, srv in ipairs(data.data) do
            local id        = srv.id
            local playing   = tonumber(srv.playing) or 0
            local maxPlr    = tonumber(srv.maxPlayers) or 0

            -- ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á, ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤/‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏ß‡πâ
            if id ~= currentJob
               and playing >= MIN_PLAYERS and playing <= MAX_PLAYERS
               and not visited[id] then

                -- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà "‡∏Ñ‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î" ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                if (not best) or (playing < best.playing) then
                    best = { id = id, playing = playing, maxPlayers = maxPlr }
                end
            end
        end

        -- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡∏û‡∏≠‡πÑ‡∏î‡πâ
        if best then
            print(("üéØ ‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß: %d/%d ‡∏Ñ‡∏ô (page %d)"):format(best.playing, best.maxPlayers, pages))
            return best.id
        end

        -- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        cursor = data.nextPageCursor
        if not cursor then break end
        task.wait(0.25)
    end

    print("‚ùå ‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô ", pages, " ‡∏´‡∏ô‡πâ‡∏≤")
    return nil
end

-- ========== ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Hop ==========
local function doHop()
    if isHopping then
        print("‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á Hop ‡∏≠‡∏¢‡∏π‡πà")
        return
    end
    isHopping = true
    sysmsg("‚è© ‡∏Å‡∏≥‡∏•‡∏±‡∏á Hop ‡∏´‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏Ñ‡∏ô‡∏ô‡πâ‡∏≠‡∏¢...", Color3.fromRGB(255,215,120))

    local target = findLowPlayerServer()
    if target then
        visited[target] = true -- ‡∏Å‡∏±‡∏ô‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        print("‚û°Ô∏è TeleportToPlaceInstance ->", target)
        local ok = pcall(function()
            TeleportService:TeleportToPlaceInstance(placeId, target, player)
        end)
        if ok then return end
        print("‚ùå TeleportToPlaceInstance ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥")
    end

    -- Fallback: Random ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
    local ok2 = pcall(function()
        TeleportService:Teleport(placeId, player)
    end)
    if not ok2 then
        sysmsg("‚ùå Hop ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô 30 ‡∏ß‡∏¥", Color3.fromRGB(255,120,120))
        task.wait(30)
    end
    isHopping = false
end

-- ========== ‡∏ß‡∏á‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å ==========
task.spawn(function()
    while true do
        task.wait(SCAN_INTERVAL)
        if not AUTO_HOP or isHopping then continue end

        local cnt = #Players:GetPlayers()
        if cnt >= TARGET_FULL then
            if not timeWhenFull then
                timeWhenFull = tick()
                sysmsg(("‚è∞ ‡∏Ñ‡∏£‡∏ö %d ‡∏Ñ‡∏ô - ‡∏à‡∏∞ Hop ‡πÉ‡∏ô %d ‡∏ß‡∏¥"):format(TARGET_FULL, WAIT_BEFORE_HOP), Color3.fromRGB(255,200,120))
            else
                local left = math.max(0, WAIT_BEFORE_HOP - (tick() - timeWhenFull))
                print("‚è≥ ‡∏£‡∏≠ Hop ‡∏≠‡∏µ‡∏Å", math.ceil(left), "‡∏ß‡∏¥")
                if left <= 0 then
                    timeWhenFull = nil
                    doHop()
                end
            end
        else
            -- ‡∏Ñ‡∏ô‡∏•‡∏î‡∏•‡∏á ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
            if timeWhenFull then
                timeWhenFull = nil
                print("‚úÖ ‡∏Ñ‡∏ô‡∏•‡∏î‡∏•‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤")
            end
        end
    end
end)

-- ========== ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å ==========
Players.PlayerAdded:Connect(function(plr)
    print(("‚ûï %s ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (‡∏£‡∏ß‡∏° %d ‡∏Ñ‡∏ô)"):format(plr.Name, #Players:GetPlayers()))
end)
Players.PlayerRemoving:Connect(function(plr)
    task.wait(0.5)
    print(("‚ûñ %s ‡∏≠‡∏≠‡∏Å (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ %d ‡∏Ñ‡∏ô)"):format(plr.Name, #Players:GetPlayers()))
end)

-- ========== ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ä‡∏ó ==========
player.Chatted:Connect(function(msg)
    msg = msg:lower()
    if msg == "/hop" then
        doHop()
    elseif msg == "/auto" then
        AUTO_HOP = not AUTO_HOP
        timeWhenFull = nil
        sysmsg(AUTO_HOP and "‚úÖ Auto Hop: ON" or "‚ùå Auto Hop: OFF",
            AUTO_HOP and Color3.fromRGB(0,255,120) or Color3.fromRGB(255,120,120))
    elseif msg == "/info" then
        local cnt = #Players:GetPlayers()
        sysmsg(("‚ÑπÔ∏è Players: %d | Target:%d | Auto:%s"):format(cnt, TARGET_FULL, AUTO_HOP and "ON" or "OFF"))
    elseif msg == "/stop" then
        AUTO_HOP = false
        isHopping, timeWhenFull = false, nil
        sysmsg("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß", Color3.fromRGB(255,200,120))
    elseif msg == "/help" then
        sysmsg("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: /hop /auto /info /stop /help")
    end
end)

sysmsg("‚úÖ Simple Auto Hop ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏û‡∏¥‡∏°‡∏û‡πå /help)")
